// LeetCode 26: Remove Duplicates from Sorted Array  
// Problem Link: https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/

// ============================================================================
// üìù Approach 1: Brute Force (O(n¬≤))  
// ============================================================================  
// - Create a new array to store unique elements  
// - Iterate through the original array:  
//     - If the element is not already present in the new array, add it  
//     - Keep track of the count of unique elements  
// ============================================================================  
// ‚úÖ Time Complexity: O(n¬≤)  
// ‚úÖ Space Complexity: O(n) (new array for unique elements)  
// ============================================================================  

class Solution {  
    public int removeDuplicates(int[] nums) {  
        int[] newArr = new int[nums.length];  
        int k = 0;  
        newArr[k] = nums[0];  

        for (int i = 1; i < nums.length; i++) {  
            boolean isDuplicate = false;  
            for (int j = 0; j <= k; j++) {  
                if (nums[i] == newArr[j]) {  
                    isDuplicate = true;  
                    break;  
                }  
            }  
            if (!isDuplicate) {  
                k++;  
                newArr[k] = nums[i];  
            }  
        }  

        // Copy back to the original array  
       for (int i = 0; i <nums.length; i++) {
            if(i <= k){
            nums[i] = newArr[i];
            }else{
                nums[i] = 0;
            }
        }

        return k + 1;  
    }  
}  

// ============================================================================  
// üìù Approach 2: Better Approach (O(n))  
// ============================================================================  
// - Use a HashSet to store unique elements  
// - Iterate through the array and add elements to the set  
// - Copy back the elements from the set to the array  
// ============================================================================  
// ‚úÖ Time Complexity: O(n)  
// ‚úÖ Space Complexity: O(n) (HashSet for storing unique elements)  
// ============================================================================  

import java.util.HashSet;  

class Solution {  
    public int removeDuplicates(int[] nums) {  
        HashSet<Integer> set = new HashSet<>();  

        for (int num : nums) {  
            set.add(num);  
        }  

        int index = 0;  
        for (int num : set) {  
            nums[index++] = num;  
        }  

        return set.size();  
    }  
}  

// ------------------------------------------------------------  
// üìù Approach 3: Two Pointers (Optimal Solution)  
// ------------------------------------------------------------  
// - Use two pointers technique:  
//     - `k` ‚Üí to track the position of the next unique element  
//     - `i` ‚Üí to iterate through the array  
// - If the current element is different from the last unique element, place it at `k + 1`  
// - Increment `k`  
// ------------------------------------------------------------  
// ‚úÖ Time Complexity: O(n)  
// ‚úÖ Space Complexity: O(1) (constant extra space)  
// ------------------------------------------------------------  

class Solution {  
    public int removeDuplicates(int[] nums) {  
        if (nums.length == 0) return 0;  

        int k = 0;  
        for (int i = 1; i < nums.length; i++) {  
            if (nums[i] != nums[k]) {  
                k++;  
                nums[k] = nums[i];  
            }  
        }  
        return k + 1;  
    }  
}  

// ============================================================================  
// ‚úÖ Summary of Approaches  
// ============================================================================  
// | Approach                       | Time Complexity | Space Complexity | Notes |  
// |-------------------------------- |---------------- |------------------|-------|  
// | Brute Force                    | O(n¬≤)           | O(n)              | Create a new array to store unique elements |  
// | Better Approach (HashSet)      | O(n)             | O(n)              | Use HashSet to remove duplicates |  
// | **Two Pointers (Best)**         | **O(n)**           | **O(1)**              | Use two pointers to remove duplicates in-place |  
// ============================================================================  
