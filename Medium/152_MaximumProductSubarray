// LeetCode 152: Maximum Product Subarray  
// Problem Link: https://leetcode.com/problems/maximum-product-subarray/description/  
// ============================================================================  
// 📝 Approach 1: Brute Force (O(n²))  
// ============================================================================  
// - Iterate through the array using two nested loops:  
//    - Outer loop → starting index of the subarray  
//    - Inner loop → calculate the product of the subarray  
//    - Keep track of the maximum product encountered so far  
// ============================================================================  
// ✅ Time Complexity: O(n²)  
// ✅ Space Complexity: O(1) (constant extra space)  
// ============================================================================  

class Solution {
    public int maxProduct(int[] nums) {
        int mul = 1;
        int largest = nums[0];

        for (int i = 0; i < nums.length; i++) { // Starting index
            mul = 1;
            for (int j = i; j < nums.length; j++) { // Ending index
                mul = mul * nums[j];
                largest = Math.max(mul, largest);
            }
        }
        return largest;
    }
}

// ============================================================================  
// 📝 Approach 2: Dynamic Programming (O(n))  
// ============================================================================  
// - Use two arrays to keep track of:  
//    - `maxProd[i]` → maximum product ending at index `i`  
//    - `minProd[i]` → minimum product ending at index `i` (to handle negative numbers)  
// - Transition relation:  
//    - `maxProd[i] = max(nums[i], nums[i] * maxProd[i-1], nums[i] * minProd[i-1])`  
//    - `minProd[i] = min(nums[i], nums[i] * maxProd[i-1], nums[i] * minProd[i-1])`  
// - Result → Maximum value in `maxProd[]` array  
// ============================================================================  
// ✅ Time Complexity: O(n)  
// ✅ Space Complexity: O(n)  
// ============================================================================  

class Solution {
    public int maxProduct(int[] nums) {
        int n = nums.length;
        int[] maxProd = new int[n];
        int[] minProd = new int[n];
        
        maxProd[0] = nums[0];
        minProd[0] = nums[0];
        int result = nums[0];
        
        for (int i = 1; i < n; i++) {
            maxProd[i] = Math.max(nums[i], Math.max(nums[i] * maxProd[i - 1], nums[i] * minProd[i - 1]));
            minProd[i] = Math.min(nums[i], Math.min(nums[i] * maxProd[i - 1], nums[i] * minProd[i - 1]));
            
            result = Math.max(result, maxProd[i]);
        }
        return result;
    }
}

// ------------------------------------------------------------  
// 📝 Approach 3: Space Optimized Dynamic Programming (Optimal Solution)  
// ------------------------------------------------------------  
// - Use two variables instead of arrays to store:  
//    - `maxProd` → maximum product ending at current index  
//    - `minProd` → minimum product ending at current index  
// - Update max and min at each step based on the current element  
// - Transition relation:  
//    - Swap max and min when the current element is negative  
// - Result → Keep track of the global maximum  
// ------------------------------------------------------------  
// ✅ Time Complexity: O(n)  
// ✅ Space Complexity: O(1) (constant extra space)  
// ------------------------------------------------------------  

class Solution {
    public int maxProduct(int[] nums) {
        int maxProd = nums[0];
        int minProd = nums[0];
        int result = nums[0];

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] < 0) { // Swap when negative
                int temp = maxProd;
                maxProd = minProd;
                minProd = temp;
            }
            maxProd = Math.max(nums[i], nums[i] * maxProd);
            minProd = Math.min(nums[i], nums[i] * minProd);

            result = Math.max(result, maxProd);
        }
        return result;
    }
}

// ============================================================================  
// ✅ Summary of Approaches  
// ============================================================================  
// | Approach                             | Time Complexity | Space Complexity | Notes |  
// |------------------------------------- |---------------- |------------------|-------|  
// | Brute Force                         | O(n²)           | O(1)              | Calculate product of all subarrays |  
// | Dynamic Programming                 | O(n)             | O(n)              | Keep track of max and min products in arrays |  
// | **Space Optimized DP (Best)**        | **O(n)**           | **O(1)**            | Keep track of max and min products using variables |  
// ============================================================================  
